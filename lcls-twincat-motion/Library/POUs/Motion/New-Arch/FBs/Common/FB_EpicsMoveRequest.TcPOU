<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_EpicsMoveRequest" Id="{f9713c0b-09a1-45a0-9fc6-342a7422cfa5}" SpecialFunc="None">
    <Declaration><![CDATA[(*Implements MoveRequest interface for EPICS Motor*)
FUNCTION_BLOCK FB_EpicsMoveRequest IMPLEMENTS I_MoveRequest
VAR
   // EPICS Interface
    {attribute 'no_copy'}
    stMotionEpicsItf : REFERENCE TO ST_MotionEpicsInterface;

    eEnableMode: E_StageEnableMode:=E_StageEnableMode.DURING_MOTION;
    bMoveCmd	: BOOL;
    // Start the homing routine
    {attribute 'pytmc' := '
        pv: PLC:bHomeCmd
        io: io
        field: DESC Start the homing routine
    '}
    bHomeCmd: BOOL;
    {attribute 'hide'}
    eHomeMode	: E_EpicsHomeCmd := E_EpicsHomeCmd.NONE;
    {attribute 'hide'}
    bEnableDone : BOOL;
    {attribute 'hide'}
    bMoveOk: BOOL;
    (* non epics*)
    {attribute 'hide'}
    bExecute : BOOL;
    {attribute 'hide'}
    rtMoveCmdShortcut: R_TRIG;
    {attribute 'hide'}
    rtHomeCmdShortcut: R_TRIG;
    {attribute 'hide'}
    rtEnableMode: R_TRIG;
    {attribute 'hide'}
    rtNewMoveReq: R_TRIG;
    {attribute 'hide'}
    rtUserExec: R_TRIG;
    {attribute 'hide'}
    rtExec : R_TRIG;
    {attribute 'hide'}
    stMotionRequestStatus : ST_MoveRequestStatus;
    {attribute 'hide'}
    ftStopExec: F_TRIG;
    {attribute 'hide'}
    eRestoreSettingsState : ( RestoreSettingWaiting:=0, RestoreSettingDone:=1);
    {attribute 'hide'}
    ftstop: F_TRIG;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF( stMotionEpicsItf ) THEN
   RETURN;
END_IF
(* Check for the plc shortcut commands
   Used for testing or to circumvent motor record issues*)
rtMoveCmdShortcut(CLK:=bMoveCmd);
rtHomeCmdShortcut(CLK:=bHomeCmd);

(* Execute on rising edge*)
IF rtMoveCmdShortcut.Q AND NOT stMotionEpicsItf.bExecute THEN
    stMotionEpicsItf.bExecute:=TRUE;
    stMotionEpicsItf.nCommand := E_EpicsMotorCmd.MOVE_ABSOLUTE;

ELSIF rtHomeCmdShortcut.Q AND NOT stMotionEpicsItf.bExecute THEN

    IF ( eHomeMode = E_EpicsHomeCmd.ABSOLUTE_SET )  OR ( eHomeMode = E_EpicsHomeCmd.NONE) THEN
       stMotionEpicsItf.bExecute:= FALSE;
    ELSE
       stMotionEpicsItf.bExecute:= TRUE;
    END_IF
    stMotionEpicsItf.nCommand:=E_EpicsMotorCmd.HOME;
    (* Automatically fill the correct nCmdData for homing*)
    stMotionEpicsItf.nCmdData:=eHomeMode;
END_IF

(* entry point for local and EPICS main execs *)
rtUserExec(CLK:=stMotionEpicsItf.bExecute);
(* if a Move/Home Goal is comfirmed and there is no persistant
   error conditions, then we have a valid move request.*)
stMotionRequestStatus.bNewMoveReq S= NOT stMotionEpicsItf.bBusy AND rtUserExec.Q AND NOT stMotionEpicsItf.bError AND bMoveOk;;
(* this Move request is valid till an error occurs or the currently move is done *)
stMotionRequestStatus.bNewMoveReq R= NOT stMotionEpicsItf.bExecute OR stMotionEpicsItf.bError;
stMotionRequestStatus.bPrepareDisable R= stMotionRequestStatus.bNewMoveReq;
rtNewMoveReq(CLK:=stMotionRequestStatus.bNewMoveReq);

(* Set the proper command for the request move;
   if bservo not set, manual step moves will be performed *)
IF rtUserExec.Q THEN
    // Transfer nCommand and nCmdData to local copies at rising edge of bExecute (avoid issues if nCommand or nCmdData are changed during a command)
    stMotionRequestStatus.nCmdData:=stMotionEpicsItf.nCmdData;
    stMotionRequestStatus.nCommand:=stMotionEpicsItf.nCommand;

    stMotionRequestStatus.bReset := FALSE;
    IF NOT bHomeCmd THEN
        (* attempting to move an axis without homing first? *)
        IF eHomeMode <> E_EpicsHomeCmd.NONE AND NOT stMotionEpicsItf.bHomed THEN
            (* one can just set bHome here even though no homing was done?*)
            stMotionEpicsItf.sErrorMessage:='Axis homing mode set, but homing routine pending';
        END_IF
    END_IF
END_IF

rtEnableMode(CLK:=(eEnableMode = E_StageEnableMode.DURING_MOTION));
(* Handle auto-enable timing *)
CASE eEnableMode OF
    (* Not recommended, not tested *)
    E_StageEnableMode.ALWAYS:
        // if no latching interlock condition, No errors
        stMotionEpicsItf.bEnable:= NOT stMotionEpicsItf.bError AND bMoveOk;
    E_StageEnableMode.DURING_MOTION:
        IF rtEnableMode.Q THEN
            stMotionEpicsItf.bEnable := FALSE;
        END_IF
        IF rtNewMoveReq.Q THEN
            stMotionEpicsItf.bEnable S= stMotionRequestStatus.bNewMoveReq;
        END_IF
END_CASE

stMotionRequestStatus.bExecute := NOT stMotionEpicsItf.bError AND stMotionEpicsItf.bExecute AND bEnableDone;
stMotionRequestStatus.bExecHome:=stMotionRequestStatus.bExecute AND stMotionRequestStatus.nCommand = 10;
stMotionRequestStatus.bExecMove:=stMotionRequestStatus.bExecute AND NOT stMotionRequestStatus.bExecHome;

// release epics and local interface
bMoveCmd := FALSE;
bHomeCmd := FALSE;

// Move done, or aborted? prepare disable.
// we'll wait for axis to be in standstill and this state machine to be idling.
ftStopExec(CLK:=stMotionEpicsItf.bExecute);
stMotionRequestStatus.bPrepareDisable S= (eEnableMode=E_StageEnableMode.DURING_MOTION) AND ftStopExec.Q;
//
IF stMotionEpicsItf.bReset THEN
   ClearMoveRequest();
   ClearMoveRequestErrors();
   stMotionEpicsItf.bReset := FALSE;
   // Forward reset status
   stMotionRequestStatus.bReset := TRUE;
END_IF

IF stMotionEpicsItf.bBusy THEN
    stMotionEpicsItf.sErrorMessage := '';
END_IF

ftstop(CLK:=stMotionEpicsItf.bExecute);
stMotionRequestStatus.bEnable := stMotionEpicsItf.bEnable;
stMotionRequestStatus.fPosition := stMotionEpicsItf.fPosition;
stMotionRequestStatus.fVelocity:= stMotionEpicsItf.fVelocity;
stMotionRequestStatus.fAcceleration:= stMotionEpicsItf.fAcceleration;
stMotionRequestStatus.fDeceleration:= stMotionEpicsItf.fDeceleration;
]]></ST>
    </Implementation>
    <Method Name="CallAfterInit" Id="{c5f4a41a-2a36-4ec0-b020-e8f39761af26}">
      <Declaration><![CDATA[METHOD PUBLIC CallAfterInit
VAR_INPUT
    stMotionEpicsItf : REFERENCE TO ST_MotionEpicsInterface;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionEpicsItf REF=stMotionEpicsItf;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearMoveRequest" Id="{fc3a5981-a4d7-4a2d-bb30-c09c583c9e55}">
      <Declaration><![CDATA[METHOD ClearMoveRequest

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// falling edge here when target is reached, move halted
THIS^.stMotionEpicsItf.bExecute := FALSE;
THIS^.stMotionEpicsItf.bDone := FALSE;
THIS^.stMotionEpicsItf.bBusy := FALSE;
// release the cmds
THIS^.bHomeCmd:=FALSE;
THIS^.bMoveCmd:=FALSE;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearMoveRequestErrors" Id="{2bb41509-e70c-4465-a06c-a29812268b06}">
      <Declaration><![CDATA[METHOD ClearMoveRequestErrors
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionEpicsItf.bError := FALSE;
stMotionEpicsItf.nErrorId := 0;
stMotionEpicsItf.sErrorMessage := '';
stMotionRequestStatus.bExecute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="EnableMode" Id="{9356bd40-5ede-4c8b-b065-3ca414d58ac7}">
      <Declaration><![CDATA[PROPERTY EnableMode : ENUM_StageEnableMode
]]></Declaration>
      <Get Name="Get" Id="{0f06a9c5-786f-4b36-9ffb-1932b02bcacd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableMode := eEnableMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{21b092e9-96af-46ee-9d8d-c77dcd117d11}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eEnableMode := EnableMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_Init" Id="{9133e91c-1e17-4b3b-aa68-c9be539e6510}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
    stMotionEpicsItf : REFERENCE TO ST_MotionEpicsInterface;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionEpicsItf REF=stMotionEpicsItf;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HaltMoveRequest" Id="{71c9e391-cb0d-4362-ab43-3cfd1f6c0962}">
      <Declaration><![CDATA[METHOD HaltMoveRequest : BOOL
VAR_INPUT
    Busy	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Halt is always a user stop but not an interlock event or a reset.
HaltMoveRequest := NOT stMotionRequestStatus.bReset AND ftstop.Q
                        AND ((Busy AND (stMotionRequestStatus.nCommand=10))
                        OR (Busy AND (stMotionRequestStatus.nCommand=3)));
]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomeMode" Id="{e2310f41-6785-4f5a-8351-c40e1e907fe6}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY INTERNAL HomeMode : E_EpicsHomeCmd]]></Declaration>
      <Set Name="Set" Id="{398bedac-ab14-4d81-8298-42677f728951}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eHomeMode := HomeMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="InitMoveRequest" Id="{2d590fc6-f95b-45d5-9e1d-141474a0f09b}">
      <Declaration><![CDATA[METHOD InitMoveRequest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionEpicsItf.bBusy := TRUE;
THIS^.stMotionEpicsItf.bDone := FALSE;
// reset error flag
THIS^.stMotionEpicsItf.sErrorMessage := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequest" Id="{664b6655-0949-47c1-b45f-a64c7d0cda3b}">
      <Declaration><![CDATA[METHOD MoveRequest
VAR_INPUT
    // From Axis through the drive
    EnableDone	: BOOL;
    // From Interlock through the drive
    MoveOk  : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bMoveOk := MoveOk;
THIS^.bEnableDone := EnableDone;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestCompleted" Id="{29932e68-9af9-4521-bd55-b747e571b46c}">
      <Declaration><![CDATA[METHOD MoveRequestCompleted
VAR_INPUT
    MoveDone : BOOL;
    HomeDone : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.stMotionEpicsItf.bHomed := HomeDone;
THIS^.ClearMoveRequest();
THIS^.MoveRequestDone(Done:=MoveDone OR HomeDone);
THIS^.ResetMoveEnable();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestDone" Id="{ab10537f-2bb4-4a28-9c3a-e3028ea8d9fc}">
      <Declaration><![CDATA[METHOD MoveRequestDone
VAR_INPUT
    Done : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMotionEpicsItf.bDone := Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestError" Id="{674719eb-75b4-4cc3-924b-ecc3d1af31ff}">
      <Declaration><![CDATA[METHOD MoveRequestError
VAR_INPUT
    Error :BOOL;
    ErrorId :UDINT;
    ErrorMessage:T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionEpicsItf.bError := Error;
THIS^.stMotionEpicsItf.nErrorId := ErrorId;
THIS^.stMotionEpicsItf.sErrorMessage:= ErrorMessage;

IF Error THEN
    THIS^.ClearMoveRequest();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRequestTest" Id="{d84ff316-c87c-445b-b337-4ae6bc661e04}">
      <Declaration><![CDATA[(*use only for testing purpose*)
METHOD INTERNAL MoveRequestTest
VAR_INPUT
    (* From Drive*)
    HomeCmd	: BOOL;
    MoveCmd	: BOOL;
    HomeMode	: E_EpicsHomeCmd;
    EnableMode	: E_StageEnableMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bHomeCmd := HomeCmd;
THIS^.eHomeMode := HomeMode;
THIS^.eEnableMode	:= EnableMode;
THIS^.bMoveCmd	:= MoveCmd;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveResetDone" Id="{f2401880-c9b3-4971-9d2e-b338ef5fea0a}">
      <Declaration><![CDATA[METHOD MoveResetDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stMotionRequestStatus.bReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetMoveEnable" Id="{f28760d0-5752-4bf4-b850-362b1de6a659}">
      <Declaration><![CDATA[METHOD ResetMoveEnable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stMotionRequestStatus.bPrepareDisable THEN
    IF THIS^.eEnableMode=E_StageEnableMode.DURING_MOTION THEN
        THIS^.stMotionEpicsItf.bEnable := FALSE;
    END_IF
    THIS^.stMotionRequestStatus.bPrepareDisable := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetMoveRequest" Id="{90fe06b0-aa4b-458a-9f0e-28628dab07b6}">
      <Declaration><![CDATA[METHOD ResetMoveRequest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RestoreSettings" Id="{08281416-55cb-4b9c-81b3-3cf6fd0d7faf}">
      <Declaration><![CDATA[METHOD RestoreSettings
VAR_INPUT
    RestoreDone : BOOL;
    SavedPosition : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// no needed in production since the actual position is already set on the axis
// and epics status will get that last position
// use this to restore anything thats not an axisref paramter.

CASE eRestoreSettingsState OF
    RestoreSettingWaiting:
        IF RestoreDone THEN
            THIS^.stMotionEpicsItf.fPosition := SavedPosition;
            eRestoreSettingsState := RestoreSettingDone;
        END_IF
    RestoreSettingDone:;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="RestoreSettingsState" Id="{b366cb5d-502b-43b3-8623-320516670b00}">
      <Declaration><![CDATA[PROPERTY INTERNAL RestoreSettingsState : UINT]]></Declaration>
      <Get Name="Get" Id="{a39741db-d8b0-422d-b3ab-4a4dba01333b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//RestoreSettingsState := eRestoreSettingsState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{f678d159-cc5d-41ad-889c-5f951c755b6f}">
      <Declaration><![CDATA[PROPERTY Status : REFERENCE TO ST_MoveRequestStatus
]]></Declaration>
      <Get Name="Get" Id="{08876ea6-b526-4166-bd4c-0a2aa1b11215}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= stMotionRequestStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>
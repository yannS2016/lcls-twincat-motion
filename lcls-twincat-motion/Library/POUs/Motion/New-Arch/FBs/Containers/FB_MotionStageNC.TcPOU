<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionStageNC" Id="{27a9489d-ed3b-4885-89cd-bbc7b70f9440}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_MotionStageNC
VAR
    iMotionLogger : I_MotionLogger;
    {attribute 'no_copy'}
    AxisRef : REFERENCE TO AXIS_REF;
    {attribute 'no_copy'}
    stMotionEpicsItf : REFERENCE TO ST_MotionEpicsInterface;
    iPersistentDataStorage : I_PersistentDataStorage;

    //Brakes : brake fb participate in sync comm with fbMotionDrive, fbMotionAxis and fbMotionInterlocks
    fbBrake : FB_BrakeNC := (BrakeMode := E_StageBrakeMode.IF_MOVING);
    // common interlocks
    fbMotionInterlocksCommon : FB_MotionInterlocksCommon(iMotionLogger := iMotionLogger);
    // stage with Limit switches
    fbLimSwStatus : FB_LimSwStatus();
    fbMotionInterlocksLimSw : FB_MotionInterlocksLimSw ( iMotionInterlocksCommon:=fbMotionInterlocksCommon, iLimSwStatus:=fbLimSwStatus);
    fbHome : FB_HomeNC(AxisRef:=AxisRef, iMotionLogger:=iMotionLogger, iLimSwStatus:=fbLimSwStatus);;
    fbHalt : FB_HaltNC(AxisRef:=AxisRef);
    fbPower : FB_PowerNC(AxisRef:=AxisRef);
    fbReset : FB_ResetNC(AxisRef:=AxisRef);
    fbMoveAbsolute : FB_MoveAbsoluteNC(AxisRef:=AxisRef);
    fbAxisStatus : FB_AxisStatusNC(AxisRef:=AxisRef);
    fbReadParameter : FB_ReadParameterNC(AxisRef:=AxisRef);
    fbWriteParameter  : FB_WriteParameterNC(AxisRef:=AxisRef);
    fbParamsSaveRestore: FB_ParamsSaveRestoreNC(AxisRef:=AxisRef, iPersistentDataStorage := iPersistentDataStorage);
    fbEncoderScaling : FB_EncoderScaling();
    fbBacklashCompensation : FB_BacklashCompensationNC(AxisRef:=AxisRef);
    fbMotionAxis : FB_MotionAxisNC(
        iHome := fbHome,
        iHalt := fbHalt,
        iPower := fbPower,
        iReset := fbReset,
        iMoveAbsolute := fbMoveAbsolute,
        iReadParameter := fbReadParameter,
        iWriteParameter  := fbWriteParameter,
        iParamSaveRestore:= fbParamsSaveRestore,
        iEncoderScaling := fbEncoderScaling,
        iAxisStatus := fbAxisStatus,
        iBacklashCompensation :=fbBacklashCompensation,
    );
    // Motion Requests
    fbMoveRequest : FB_EpicsMoveRequest(stMotionEpicsItf:=stMotionEpicsItf);
    fbEpicsMotionParamsStatus : FB_EpicsMotionParamsStatus(stMotionEpicsItf:=stMotionEpicsItf);
    // Motion StateMachine
    fbStateMachine  : FB_MotionDriveStateMachine(
            iMotionAxis:=fbMotionAxis,
            iMoveRequest:=fbMoveRequest
    );

    fbMotionDrive: FB_MotionDrive (
        iBrake:=fbBrake,
        iMotionLogger:=iMotionLogger,
        iMotionInterlocks:=fbMotionInterlocksLimSw,
        iMotionAxis := fbMotionAxis,
        iMoveRequest := fbMoveRequest,
           iEpicsMotionParamsStatus := fbEpicsMotionParamsStatus,
        iMotionDriveStateMachine:=fbStateMachine
     ) ;
    // Drive Name
    {attribute 'hide'}
    sName : T_MaxString;
    // Non EPICS User Interface ( avoid digging into child FBs)
    eBrakeMode : E_StageBrakeMode;
    eEnableMode : E_StageEnableMode;
    eHomeMode: E_EpicsHomeCmd :=E_EpicsHomeCmd.NONE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AxisRef.ReadStatus();
fbLimSwStatus();
fbMotionInterlocksCommon();
fbMotionInterlocksLimSw();
fbReset();
fbHalt();
fbPower();
fbBacklashCompensation();
fbMoveAbsolute();
fbHome();
fbAxisStatus();
fbMotionAxis();
fbMoveRequest();
fbMotionDrive();
fbStateMachine();
fbBrake();
fbReadParameter();
fbWriteParameter();
fbParamsSaveRestore();
fbEncoderScaling();
fbEpicsMotionParamsStatus();

//
fbBrake.BrakeMode := eBrakeMode;
fbMoveRequest.EnableMode := eEnableMode;
fbMoveRequest.HomeMode := eHomeMode;
fbHome.Mode :=  eHomeMode;

]]></ST>
    </Implementation>
    <Property Name="BrakeMode" Id="{7b563b76-fecc-4885-824b-f91a0bc21af3}">
      <Declaration><![CDATA[PROPERTY BrakeMode : E_StageBrakeMode
]]></Declaration>
      <Set Name="Set" Id="{15a41f16-798f-4b50-9250-e347873647b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eBrakeMode := BrakeMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CallAfterInit" Id="{e7a5e1c3-8324-4257-a302-ab714cb009e4}">
      <Declaration><![CDATA[{attribute 'call_after_init'}
METHOD PRIVATE CallAfterInit]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMotionInterlocksCommon.CallAfterInit(iMotionLogger := THIS^.iMotionLogger);
//fbLimSwStatus.CallAfterInit(iMotionLogger := THIS^.iMotionLogger);
fbMotionInterlocksLimSw.CallAfterInit(
        iMotionInterlocksCommon := THIS^.fbMotionInterlocksCommon,
        iLimSwStatus := THIS^.fbLimSwStatus
);

fbHome.CallAfterInit(
        AxisRef := THIS^.AxisRef,
        iMotionLogger := THIS^.iMotionLogger,
        iLimSwStatus := THIS^.fbLimSwStatus
);

fbHalt.CallAfterInit(AxisRef := THIS^.AxisRef);
fbPower.CallAfterInit(AxisRef := THIS^.AxisRef);
fbReset.CallAfterInit(AxisRef := THIS^.AxisRef);
fbMoveAbsolute.CallAfterInit(AxisRef := THIS^.AxisRef);
fbReadParameter.CallAfterInit(AxisRef:=THIS^.AxisRef);
fbWriteParameter.CallAfterInit(AxisRef:=THIS^.AxisRef);

fbParamsSaveRestore.CallAfterInit(
        AxisRef := THIS^.AxisRef,
        iPersistentDataStorage := THIS^.iPersistentDataStorage
);

// Pass correctly initialized Motion axis status dependencies
fbAxisStatus.CallAfterInit(AxisRef := THIS^.AxisRef);
fbBacklashCompensation.CallAfterInit(AxisRef := THIS^.AxisRef);

// Pass correctly initialized Motion axis dependencies
fbMotionAxis.CallAfterInit(
        iHome := THIS^.fbHome,
        iHalt := THIS^.fbHalt,
        iPower := THIS^.fbPower,
        iReset := THIS^.fbReset,
        iMoveAbsolute := THIS^.fbMoveAbsolute,
        iReadParameter := THIS^.fbReadParameter,
        iWriteParameter  := THIS^.fbWriteParameter,
        iParamSaveRestore:= THIS^.fbParamsSaveRestore,
        iEncoderScaling := THIS^.fbEncoderScaling,
        iAxisStatus := THIS^.fbAxisStatus,
        iBacklashCompensation := THIS^.fbBacklashCompensation
);

fbMoveRequest.CallAfterInit(stMotionEpicsItf:= THIS^.stMotionEpicsItf);
fbEpicsMotionParamsStatus.CallAfterInit(stMotionEpicsItf:= THIS^.stMotionEpicsItf);
fbStateMachine.CallAfterInit(iMotionAxis:=fbMotionAxis, iMoveRequest:=fbMoveRequest);
// Pass correctly initialized drive dependencies
fbMotionDrive.CallAfterInit(
     iBrake:=THIS^.fbBrake,
     iMotionInterlocks:=THIS^.fbMotionInterlocksLimSw,
     iMotionLogger:=THIS^.iMotionLogger,
     iMotionAxis:=THIS^.fbMotionAxis,
     iMoveRequest:=THIS^.fbMoveRequest,
     iEpicsMotionParamsStatus:=THIS^.fbEpicsMotionParamsStatus,
     iMotionDriveStateMachine:=THIS^.fbStateMachine
);

THIS^.stMotionEpicsItf.sName := THIS^.sName;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="EnableMode" Id="{d2517567-d217-491d-9b68-9264f829d81e}">
      <Declaration><![CDATA[PROPERTY EnableMode : E_StageEnableMode]]></Declaration>
      <Set Name="Set" Id="{1782045b-083a-4984-8c31-ce01cd3f2942}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eEnableMode := EnableMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_Init" Id="{fe4c9de1-abf0-4550-ae13-2cd56df378be}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
    iMotionLogger : I_MotionLogger;
    AxisRef : REFERENCE TO AXIS_REF;
    stMotionEpicsItf : REFERENCE TO ST_MotionEpicsInterface;
    iPersistentDataStorage : I_PersistentDataStorage;
    sName : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.iMotionLogger := iMotionLogger;
THIS^.AxisRef REF= AxisRef;
THIS^.iPersistentDataStorage := iPersistentDataStorage;
THIS^.stMotionEpicsItf REF=stMotionEpicsItf;
THIS^.sName := sName;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="HardwareEnable" Id="{de413790-64d6-4df7-be45-e16e9a7af71c}">
      <Declaration><![CDATA[PROPERTY HardwareEnable : BOOL]]></Declaration>
      <Set Name="Set" Id="{4e90c6a1-868e-40b9-a14d-f0f664cb75ae}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.fbMotionInterlocksCommon.HardwareEnable := HardwareEnable;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="HomeMode" Id="{6fbba694-14cc-47d7-b386-b3a87f93d4ab}">
      <Declaration><![CDATA[PROPERTY HomeMode : E_EpicsHomeCmd
]]></Declaration>
      <Set Name="Set" Id="{1a6336ac-7eec-4dce-ac7d-8543b797a82e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eHomeMode := HomeMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="LimBackward" Id="{0a694a2c-821b-487b-b05f-33f0c7db41ce}">
      <Declaration><![CDATA[PROPERTY LimBackward : BOOL]]></Declaration>
      <Set Name="Set" Id="{da6b1409-3d4c-4a22-9e2d-f94bf698dc21}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.fbLimSwStatus.LimBackward := LimBackward;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="LimForward" Id="{12e7d2e2-4178-42bf-a874-e4fbc8f61cdb}">
      <Declaration><![CDATA[PROPERTY LimForward : BOOL]]></Declaration>
      <Set Name="Set" Id="{3d00e8a0-812a-46a2-abcc-4f40ba55e42d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.fbLimSwStatus.LimForward := LimForward;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="UserEnable" Id="{863b6547-890c-46aa-afec-34d889e5d2ed}">
      <Declaration><![CDATA[PROPERTY UserEnable : BOOL]]></Declaration>
      <Set Name="Set" Id="{a26c7d34-2d19-4d31-8732-6c1180f87277}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.fbMotionInterlocksCommon.UserEnable := UserEnable;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>
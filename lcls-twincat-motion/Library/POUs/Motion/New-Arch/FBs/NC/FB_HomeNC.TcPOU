<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_HomeNC" Id="{970a142c-358e-492f-9cec-3782954ac4db}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HomeNC IMPLEMENTS I_Home
VAR
    {attribute 'no_copy'}
    AxisRef : REFERENCE TO AXIS_REF;
    {attribute 'hide'}
    iMotionLogger : I_MotionLogger;
    {attribute 'hide'}
    iLimSwStatus : I_LimSwStatus;
    fbMcHome : MC_Home;
    fbMcSetPosition : MC_SetPosition;
    fPosition : LREAL;
    fOffset : LREAL;
    {attribute 'hide'}
    nHomeState : UINT;
    eHomeMode: E_EpicsHomeCmd :=E_EpicsHomeCmd.NONE;
    {attribute 'hide'}
    bFowardLimHitFirst : BOOL;
    {attribute 'hide'}
    bBackwardLimHitFirst : BOOL;
    {attribute 'hide'}
    ftFowardSwHitFirst : F_TRIG;
    {attribute 'hide'}
    ftBackwardLimHitFirst : R_TRIG;
    {attribute 'hide'}
    ftBackwardSwHitFirst: F_TRIG;
    {attribute 'hide'}
    rtHomeSwHitFirst : R_TRIG;
    {attribute 'hide'}
    bHomeSwHitFirst : BOOL;
    {attribute 'hide'}
    bHLDone : BOOL;
    {attribute 'hide'}
    rtDone : R_TRIG;
    {attribute 'hide'}
    bHomeDone: BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(AxisRef) THEN
    RETURN;
END_IF

CASE eHomeMode OF
    E_EpicsHomeCmd.LOW_LIMIT:
        fbMcHome.HomingMode := MC_HomingMode.MC_DefaultHoming;
        fbMcHome.Options.SearchDirection := MC_Direction.MC_Negative_Direction;
        fbMcHome.Options.SyncDirection := MC_Direction.MC_Positive_Direction;
        fbMcHome.Options.ClearPositionLag := TRUE;
        fbMcHome.bCalibrationCam := NOT iLimSwStatus.LimBackward;
        fbMcSetPosition.Execute:=fbMcHome.Done;
        bHomeDone := fbMcHome.Done AND fbMcSetPosition.Done;
       // bMove := TRUE;
    E_EpicsHomeCmd.HIGH_LIMIT:
        fbMcHome.HomingMode := MC_HomingMode.MC_DefaultHoming;
        fbMcHome.Options.SearchDirection := MC_Direction.MC_Positive_Direction;
        fbMcHome.Options.SyncDirection := MC_Direction.MC_Negative_Direction;
        //fbMcHome.Options.ClearPositionLag := TRUE;
        fbMcHome.bCalibrationCam := NOT iLimSwStatus.LimForward;
        fbMcSetPosition.Execute:=fbMcHome.Done;
        bHomeDone := fbMcHome.Done AND fbMcSetPosition.Done;
    E_EpicsHomeCmd.HOME_VIA_LOW:
        fbMcHome.bCalibrationCam := iLimSwStatus.LimHome OR NOT iLimSwStatus.LimBackward;
        CASE nHomeState OF
            0:// Default Search Home, if found then MC_Home register the index pulse
                fbMcHome.HomingMode := MC_HomingMode.MC_DefaultHoming;
                fbMcHome.Options.ClearPositionLag := TRUE;
                fbMcHome.Options.SearchDirection := MC_Direction.MC_Negative_Direction;
                fbMcHome.Options.SyncDirection := MC_Direction.MC_Positive_Direction;
                IF fbMcHome.Busy THEN
                    nHomeState := 1;
                END_IF
            1:
                // IF HL was hit before the home switch, register that event and allow the homing to complete
                // on the HL. then we will initiate another Homing move backwad.
                ftBackwardSwHitFirst(CLK:=iLimSwStatus.LimBackward);
                rtHomeSwHitFirst(CLK:=iLimSwStatus.LimHome);

                IF fbMcHome.Busy THEN
                    IF ftBackwardSwHitFirst.Q THEN
                        bBackwardLimHitFirst := TRUE;
                        nHomeState := 2;
                    ELSIF rtHomeSwHitFirst.Q THEN
                        bHomeSwHitFirst := TRUE;
                        nHomeState := 3;
                    END_IF
                END_IF
            2:
                // Second Homing stage, this time around on the homing switch
                IF bBackwardLimHitFirst AND fbMcHome.Done THEN
                    bHLDone := TRUE;
                    fbMcHome.Options.SearchDirection := MC_Direction.MC_Positive_Direction;
                    fbMcHome.Options.SyncDirection := MC_Direction.MC_Negative_Direction;
                    fbMcHome.Options.ClearPositionLag := TRUE;
                    //fbMcHome.bCalibrationCam := iLimSwStatus.LimHome OR NOT iLimSwStatus.LimBackward;
                    // restart homing toward home switch
                    THIS^.Home(Position:=fbMcHome.Position, BufferMode:=MC_Aborting);
                    bBackwardLimHitFirst := FALSE;
                    nHomeState := 3;
                END_IF
            3: // Done
                fbMcSetPosition.Execute:=fbMcHome.Done;
                bHomeDone := fbMcHome.Done AND fbMcSetPosition.Done;
                IF bHomeDone THEN
                    bHLDone := FALSE;
                    nHomeState := 0;
                END_IF
        END_CASE
    E_EpicsHomeCmd.HOME_VIA_HIGH:
        fbMcHome.bCalibrationCam := iLimSwStatus.LimHome OR NOT iLimSwStatus.LimForward;
        CASE nHomeState OF
            0:// Default Search Home, if found then MC_Home register the index pulse
                fbMcHome.HomingMode := MC_HomingMode.MC_DefaultHoming;
                fbMcHome.Options.ClearPositionLag := TRUE;
                fbMcHome.Options.SearchDirection := MC_Direction.MC_Positive_Direction;
                fbMcHome.Options.SyncDirection := MC_Direction.MC_Negative_Direction;

                IF fbMcHome.Busy THEN
                    nHomeState := 1;
                END_IF
            1:
                // IF HL was hit before the home switch, register that event and allow the homing to complete
                // on the HL. then we will initiate another Homing move backwad.
                ftFowardSwHitFirst(CLK:=iLimSwStatus.LimForward);
                rtHomeSwHitFirst(CLK:=iLimSwStatus.LimHome);

                IF fbMcHome.Busy THEN
                    IF ftFowardSwHitFirst.Q THEN
                        bFowardLimHitFirst := TRUE;
                        nHomeState := 2;
                    ELSIF rtHomeSwHitFirst.Q THEN
                        bHomeSwHitFirst := TRUE;
                        nHomeState := 3;
                    END_IF
                END_IF
            2:
                // Second Homing stage, this time around on the homing switch
                IF bFowardLimHitFirst AND fbMcHome.Done THEN
                    bHLDone := TRUE;
                    fbMcHome.Options.SearchDirection := MC_Direction.MC_Negative_Direction;
                    fbMcHome.Options.SyncDirection := MC_Direction.MC_Positive_Direction;
                    fbMcHome.Options.ClearPositionLag := TRUE;
                    // restart homing toward home switch
                    THIS^.Home(Position:=fbMcHome.Position, BufferMode:=MC_Aborting);
                    bFowardLimHitFirst := FALSE;
                    nHomeState := 3;
                END_IF
            3: // Done
                fbMcSetPosition.Execute:=fbMcHome.Done;
                bHomeDone := fbMcHome.Done AND fbMcSetPosition.Done;
                IF bHomeDone THEN
                    bHLDone := FALSE;
                    nHomeState := 0;
                END_IF
        END_CASE

    E_EpicsHomeCmd.ABSOLUTE_SET:
        fbMcHome.HomingMode := MC_HomingMode.MC_Direct;
        fbMcHome.Options.SearchDirection := MC_Direction.MC_Undefined_Direction;
        fbMcHome.Options.SyncDirection := MC_Direction.MC_Undefined_Direction;
        fbMcHome.Options.ClearPositionLag := TRUE;
        bHomeDone := fbMcHome.Done;
END_CASE

fbMcHome(Axis := AxisRef);
fbMcSetPosition(Axis := AxisRef, Mode:=0, Position:=fPosition);
]]></ST>
    </Implementation>
    <Property Name="Aborted" Id="{b3440598-2192-4aa3-bd94-648810782f1d}">
      <Declaration><![CDATA[PROPERTY Aborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{6a45fc91-d1f8-4045-827a-687d21932173}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Aborted := fbMcHome.CommandAborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Active" Id="{4386ac45-3e88-4c79-8d18-81c7e83c1e8e}">
      <Declaration><![CDATA[PROPERTY Active : BOOL
]]></Declaration>
      <Get Name="Get" Id="{bdd5f606-f201-4f1a-9491-5ed9fc2ed98d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := fbMcHome.Active;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{c7e43be2-48b0-438b-8ceb-465d60425bfc}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{cb0740bd-cd32-462e-8d30-3401b18588d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := fbMcHome.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CallAfterInit" Id="{bf0efffc-cb26-4144-93d7-4a53b23636d4}">
      <Declaration><![CDATA[METHOD PUBLIC CallAfterInit
VAR_INPUT
    AxisRef : REFERENCE TO AXIS_REF;
    iMotionLogger : I_MotionLogger;
    iLimSwStatus : I_LimSwStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.AxisRef REF= AxisRef;
THIS^.iMotionLogger := iMotionLogger;
THIS^.iLimSwStatus:= iLimSwStatus;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{a400b97e-6245-4667-8036-7fb53f8ce97f}">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{aef52b53-9bff-4703-970f-52b560ffba73}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := bHomeDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{d9029227-7d8c-4426-821a-d46327fbfa6d}">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{4884c9e1-0ab0-469e-aae8-b83b96b6f583}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := fbMcHome.Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{cf64e9b6-c8bf-4aa1-9fa1-b62063c78b03}">
      <Declaration><![CDATA[PROPERTY ErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{e14def51-9c37-4182-ba09-611583cf679e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := fbMcHome.ErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{36203808-aa8e-419d-b89f-47cad560b581}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
    AxisRef : REFERENCE TO AXIS_REF;
    iMotionLogger : I_MotionLogger;
    iLimSwStatus : I_LimSwStatus;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.AxisRef REF= AxisRef;
THIS^.iMotionLogger := iMotionLogger;
THIS^.iLimSwStatus:= iLimSwStatus;]]></ST>
      </Implementation>
    </Method>
    <Property Name="HLDone" Id="{20fb5295-3ffb-4772-9ef6-2e47f50a3f94}">
      <Declaration><![CDATA[PROPERTY HLDone : BOOL
]]></Declaration>
      <Get Name="Get" Id="{db41cbe0-bc47-4b18-a6d4-59eff84f4658}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HLDone := bHLDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Home" Id="{bc450e32-fe3c-4fef-961a-7ec21133b561}">
      <Declaration><![CDATA[METHOD  Home
VAR_INPUT
    Position        : LREAL         := DEFAULT_HOME_POSITION;
    BufferMode      : MC_BufferMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.eHomeMode = E_EpicsHomeCmd.NONE THEN
    THIS^.bHomeDone := TRUE;
    RETURN;
END_IF

THIS^.fPosition := Position;
fbMcHome(Execute := FALSE, Axis := THIS^.AxisRef, Done=>bHomeDone);
// dont start homing unless hardware limits are in correct state.
fbMcHome(	Execute := iLimSwStatus.LimBackward AND iLimSwStatus.LimForward AND NOT iLimSwStatus.LimHome,
            Axis := THIS^.AxisRef,
            Position := Position,
            BufferMode:=BufferMode
        );
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Message" Id="{50dd0817-9d23-4b27-bd5b-fe17ea82eb6e}">
      <Declaration><![CDATA[PROPERTY Message : T_MAXSTRING
]]></Declaration>
      <Get Name="Get" Id="{5582f213-525c-49f8-9472-dcc0e7068f61}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Mode" Id="{bacfc68b-674d-49fb-a838-6a7b08d66c8b}">
      <Declaration><![CDATA[PROPERTY Mode : E_EpicsHomeCmd
]]></Declaration>
      <Get Name="Get" Id="{018ebc11-483b-4d91-b1ca-54274e9fa554}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := eHomeMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d7a9685a-e050-4fa2-92a8-d25079a18728}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eHomeMode := Mode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Offset" Id="{48496da5-ced9-4c7a-88b4-656a32aa685b}">
      <Declaration><![CDATA[PROPERTY Offset : LREAL
]]></Declaration>
      <Set Name="Set" Id="{0ef7a418-62f9-4e76-9f2c-837b987f3900}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fOffset := Offset;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Position" Id="{afef80c7-a1a3-4197-a7a0-d9553542477a}">
      <Declaration><![CDATA[PROPERTY Position : LREAL
]]></Declaration>
      <Set Name="Set" Id="{6ac419d4-6add-4703-8089-625e0296877b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fPosition := Position;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BacklashCompensationNC" Id="{15421978-726d-43ca-8e30-d33510c30e01}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    Handle positive/negative backlash compensation
    User needs to set the direction of backlash from the sign of the compensation value
    Backlash compensation is disabled during referencing (homing).
    When direction is positive/negative, further movement in the negative/positive direction not compensated
    further movement in the negative/positive direction will be compensated
*)
FUNCTION_BLOCK FB_BacklashCompensationNC IMPLEMENTS I_BacklashCompensation
VAR
    {attribute 'no_copy'}
    AxisRef : REFERENCE TO AXIS_REF;
    fbMcBacklashCompensation: MC_BacklashCompensation;
    (* Other status information for users of the IOC *)
    // Enabled axis backlash compensation
    {attribute 'pytmc' := '
        pv: PLC:bBacklashCompUserEn
        io: io
        field: ZNAM FALSE
        field: ONAM TRUE
        field: DESC Enable Backlash compensation
    '}
    bUserEnable: BOOL;

    // backlash compensation status
    {attribute 'pytmc' := '
        pv: PLC:bBacklashCompStatus
        io: i
        field: ZNAM DISABLED
        field: ONAM ENABLED
        field: DESC Backlash compensation status
    '}
    bBacklashCompStatus: BOOL;

    // Backlash compensation value
    {attribute 'pytmc' := '
        pv: PLC:fBacklashComp
        io: io
        field: DESC Backlash compensation
    '}
    fBacklash: LREAL := 0.0;

    // Backlash Ramp Velocity
    {attribute 'pytmc' := '
        pv: PLC:fRampVelo
        io: io
        field: DESC Backlash compensation Ramp Velocity
    '}
     fRampVelo : LREAL := 0.0;

    // Current Backlash compensation value ?
    {attribute 'pytmc' := '
        pv: PLC:fMeasuredBacklashComp
        io: i
        field: DESC Currently applied compensation
    '}
    fCurrentBacklash: LREAL;
    {attribute 'hide'}
    fCurrentCompensation : LREAL := 0.0;
    {attribute 'hide'}
    bEnable: BOOL;
    {attribute 'hide'}
    rtbacklashCompensation : R_TRIG;
    {attribute 'hide'}
    bLocalEnable : BOOL;
    {attribute 'hide'}
    sMessage : T_MAXSTRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(AxisRef) THEN
    RETURN;
END_IF

AxisRef.ReadStatus();
// Monitor EPICS interface and reset to register a new compensation value.

rtbacklashCompensation(CLK:=((fBacklash<>fCurrentCompensation) AND AxisRef.Status.NotMoving));
IF 	rtbacklashCompensation.Q THEN
    bEnable := FALSE;
END_IF

fbMcBacklashCompensation( Axis:=AxisRef,
    Enable:=bEnable AND bUserEnable,
    Backlash:= fBacklash,
    CompensationInPositiveDirection:=(fBacklash < 0.0),
    Ramp:=fRampVelo,
    DisableMode	:= E_DISABLEMODE.DisableModeHold,
);
fCurrentCompensation := fBacklash;
]]></ST>
    </Implementation>
    <Method Name="BacklashCompensation" Id="{72d6dae3-a62a-450e-865b-c60a18c47466}">
      <Declaration><![CDATA[METHOD BacklashCompensation
VAR_INPUT
    Enable	: BOOL := FALSE;
    RampVelo	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bEnable := Enable AND THIS^.bUserEnable;
THIS^.fRampVelo := RampVelo;

fbMcBacklashCompensation( Axis:=THIS^.AxisRef,
    Enable:=THIS^.bEnable,
    Ramp:=THIS^.fRampVelo,
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="BacklashCompensationTest" Id="{5e2ffdc2-d9b7-43ca-8da1-133fa26b619c}">
      <Declaration><![CDATA[(*DO NOT USE for Production code. this provided for unit testing*)
METHOD INTERNAL BacklashCompensationTest
VAR_INPUT
    UserEnable : BOOL;
    Compensation : LREAL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bUserEnable := UserEnable;
THIS^.fBacklash := Compensation;

fbMcBacklashCompensation( Axis:=AxisRef,
    Enable:= FALSE,
    Backlash:=Compensation
);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{67db6598-5154-4b86-b034-ccf5383284d7}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{1e5680ce-0bf7-483a-a265-b25d19a5fa6c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := fbMcBacklashCompensation.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CallAfterInit" Id="{59b21a6b-3d1b-46f2-866a-5384398ac207}">
      <Declaration><![CDATA[METHOD PUBLIC CallAfterInit
VAR_INPUT
    AxisRef : REFERENCE TO AXIS_REF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.AxisRef REF= AxisRef;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentBacklash" Id="{cbe427fc-3f49-4b37-9ce2-197f792afdcd}">
      <Declaration><![CDATA[PROPERTY CurrentBacklash : LREAL
]]></Declaration>
      <Get Name="Get" Id="{c8ce09c0-5517-4ca5-b11a-a6e73bcf0046}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{0213434a-d40a-49c7-a6b4-a3e9e9a7a41a}">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c1a3c97c-ae91-4276-85b5-feecf9e8d7c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := THIS^.fbMcBacklashCompensation.Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{b6765fc0-40e7-4ce5-aa13-569ea50920db}">
      <Declaration><![CDATA[PROPERTY ErrorID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{3dbdc77e-7172-4e8a-b541-0b84a6087295}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := THIS^.fbMcBacklashCompensation.ErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_Init" Id="{86eeb26b-dd4d-42ae-bdf4-cda3d947fa1b}">
      <Declaration><![CDATA[METHOD FB_Init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    AxisRef : REFERENCE TO AXIS_REF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.AxisRef REF= AxisRef;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Message" Id="{799861dc-10f6-42dd-a8b5-747f46787023}">
      <Declaration><![CDATA[PROPERTY Message : T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{b04d60be-1e7a-4ed8-aad3-cee013905d08}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Message :=sMessage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{9ab725b4-a349-4d8f-bae9-65d83e60c7e9}">
      <Declaration><![CDATA[PROPERTY Status : BOOL
]]></Declaration>
      <Get Name="Get" Id="{ad2b2cf3-4280-4b71-8ab1-cdec9c65c1b4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[status := fbMcBacklashCompensation.Enabled;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>